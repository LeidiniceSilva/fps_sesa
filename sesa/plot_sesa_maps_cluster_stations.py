# -*- coding:utf-8 -*-

__author__      = "Leidinice Silva"
__email__       = "leidinicesilva@gmail.com"
__date__        = "02/09/2023"
__description__ = "This script plot cluster analysis from each weather station"

import os
import conda
import numpy as np
import matplotlib.pyplot as plt

from matplotlib.patches import Polygon
from mpl_toolkits.basemap import Basemap

type_cycle = 'annual_cycle'

longitude =[-53.37138888, -53.37638888, -52.1, -52.70111111, -54.01333333, -50.90555555, -54.61805554, -55.61277777, -51.83472221, -53.46749999, -56.43722221, -54.31083333, -51.16666666, -50.13527777, -53.82666666, -52.38249999, -57.08249999, -55.5261111, -53.70361111, -54.69416666, -51.06416666, -51.82416666, -50.82749999, -49.73305554, -54.88555555, -51.53472221, -50.14944444, -49.49805555, -52.55833333, -50.05833333, -51.87055554, -53.11194444, -56.01555555, -48.81333333, -53.6736111, -49.31555555, -50.88277777, -54.96222222, -49.93444444, -52.40388888, -51.51222222, -49.48333333, -53.31694443, -54.48055554, -53.7911111, -50.33555555, -49.04194444, -52.30638888, -48.61999999, -49.64666666, -53.41277777, -50.60416666, -51.57555554, -48.76194444, -52.415, -50.14638888, -49.26749999, -50.98555555, -53.50444444, -52.34888888, -52.85055555, -51.35444444, -50.36333333, -53.63277777, -49.58055554, -48.64166666, -50.3686111, -53.74805555, -53.09444444, -54.48305554, -51.08944444, -48.80861111, -49.26666666, -52.39194444, -49.1575, -50.8711111, -48.41638888, -49.99972221, -54.01972221, -51.96305555, -50.24555555, -48.88527777, -55.02416666, -48.16444444, -50.18055554, -49.94638888, -54.18166666, -51.91666666, -50.57777777, -53.63472221, -52.93194443, -48.94555555, -55.32944443, -49.89416666, -54.60555555, -52.85888888, -55.71638888, -52.13444444, -50.97416666, -48.55722222, -49.02888888, -53.82722221, -49.965, -54.91138888, -51.4, -56.53999999, -50.49027777, -48.66666666, -54.52805554, -52.47055554, -57.88666666, -49.73416666, -55.17777777, -56.13694444, -51.55222222, -48.11388888, -50.93027777, -48.84027777, -49.92055554, -54.97194443, -48.48972221, -51.71222222, -48.54472221, -55.78388888, -54.6, -52.87555554, -49.96583333, -56.41666666, -50.59499999, -48.15138888, -51.18138888, -49.51805554, -54.55305555, -57.63749999, -56.62305554, -50.61666666, -49.52499999, -48.25555555, -53.26722221, -52.60277777, -39.84833333, -49.19194444, -38.6961111, -51.71777777, -54.45361111, -50.98138888, -39.26666666, -49.1, -52.60111111, -53.22416666, -49.91472222, -48.28416666, -54.83722221, -39.55138888]
latitude = [-33.74166666, -32.53749999, -32.03333333, -31.40583333, -31.34777777, -31.24777777, -31.0025, -30.84249999, -30.81055555, -30.54777777, -30.3686111, -30.34138888, -30.05, -30.00972222, -29.89388888, -29.87333332, -29.84249999, -29.71166666, -29.70833333, -29.70194444, -29.67444443, -29.45027777, -29.36888888, -29.35027777, -29.19138888, -29.16722221, -29.04888888, -28.93138888, -28.85361111, -28.75138888, -28.70472222, -28.65333333, -28.64944444, -28.60416666, -28.60361111, -28.53249999, -28.51361111, -28.41694443, -28.27555554, -28.22944443, -28.22194443, -28.13333333, -27.92166666, -27.89305555, -27.85416666, -27.80222222, -27.6786111, -27.66027777, -27.6025, -27.41833332, -27.39555555, -27.2886111, -27.16944443, -26.95083333, -26.9386111, -26.93749999, -26.91361111, -26.81944443, -26.77666666, -26.41722221, -26.40694444, -26.3986111, -26.3936111, -26.28638888, -26.2486111, -26.0811111, -25.83499999, -25.72194443, -25.69472221, -25.60194444, -25.56583333, -25.51277777, -25.43333333, -25.36888888, -25.32222221, -25.01333333, -24.96305555, -24.78944444, -24.53583333, -24.43722221, -24.23833333, -23.98138888, -23.96694443, -23.85138888, -23.77305554, -23.50527777, -23.44944444, -23.40777777, -23.40694444, -23.39027777, -23.37583332, -23.09972221, -23.0025, -22.9486111, -22.85722222, -22.63388888, -22.5525, -22.49166666, -22.37249999, -22.37083332, -22.35805555, -22.30666666, -22.23527777, -22.19388888, -22.11999999, -22.10083333, -21.92722221, -21.85555555, -21.77472221, -21.75138888, -21.70583333, -21.66527777, -21.60916666, -21.47833332, -21.45777777, -21.33833333, -21.31916666, -21.13305554, -21.08555555, -20.98166666, -20.94916666, -20.78999999, -20.55888888, -20.47555554, -20.45, -20.44444444, -20.40305555, -20.38333333, -20.165, -19.98583333, -19.69527777, -19.5391666, -19.42027777, -18.99666666, -18.98888888, -18.96666666, -18.95277777, -18.91722221, -18.82277777, -18.80222222, -18.71388888, -18.40972222, -17.96416666, -17.92388888, -17.89638888, -17.78583333, -17.73333333, -17.71666667, -17.45472222, -17.33944444, -17.33694444, -17.30416666, -17.29722221, -17.00722222]
 
if type_cycle == 'diurnal_cycle':
	list_hc = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 0, 3, 1, 3, 1, 1, 1, 3, 1, 3, 4, 3, 1, 3, 1, 3, 3, 3, 3, 1, 3, 0, 3, 3, 3, 3, 3, 4, 3,
	4, 0, 0, 0, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 3, 4, 3, 0, 4, 0, 4, 4, 4, 4, 4, 0, 4, 0, 0, 4, 0,
	4, 4, 4, 4, 4, 4, 0, 4, 0, 2, 4, 4, 2, 4, 4, 2, 2, 2, 2, 4, 2, 2, 4, 2, 2, 2, 2, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2,
	2, 2, 2, 2, 4, 0]
else:
	list_hc = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 0, 3, 1, 3, 1, 1, 1, 3, 1, 3, 4, 3, 1, 3, 1, 3, 3, 3, 3, 1, 3, 0, 3, 3, 3, 3, 3, 4, 3,
	4, 0, 0, 0, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 3, 4, 3, 0, 4, 0, 4, 4, 4, 4, 4, 0, 4, 0, 0, 4, 0,
	4, 4, 4, 4, 4, 4, 0, 4, 0, 2, 4, 4, 2, 4, 4, 2, 2, 2, 2, 4, 2, 2, 4, 2, 2, 2, 2, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2,
	2, 2, 2, 2, 4, 0]
	 
print(len(longitude))
print(len(latitude))
print(len(list_hc))

count_i = []
count_ii = []
count_iii = []
count_iv = []
count_v = []

for count, idx in enumerate(list_hc):
	
	if idx == 0:
		count_i.append(count)

	if idx == 1:
		count_ii.append(count)
		
	if idx == 2:
		count_iii.append(count)
	
	if idx == 3:
		count_iv.append(count)
	
	if idx == 4:
		count_v.append(count)

lon_c_i = []
lon_c_ii = []
lon_c_iii = []
lon_c_iv = []
lon_c_v = []

lat_c_i = []
lat_c_ii = []
lat_c_iii = []
lat_c_iv = []
lat_c_v = []

for c_i in count_i:
	lon_c_i.append(longitude[c_i])
	lat_c_i.append(latitude[c_i])

for c_ii in count_ii:
	lon_c_ii.append(longitude[c_ii])
	lat_c_ii.append(latitude[c_ii])
	
for c_iii in count_iii:
	lon_c_iii.append(longitude[c_iii])
	lat_c_iii.append(latitude[c_iii])
	
for c_iv in count_iv:
	lon_c_iv.append(longitude[c_iv])
	lat_c_iv.append(latitude[c_iv])
	
for c_v in count_v:
	lon_c_v.append(longitude[c_v])
	lat_c_v.append(latitude[c_v])

print('Plot figure')
# Plot figure   
fig = plt.figure()

my_map = Basemap(projection='cyl', llcrnrlon=-75, llcrnrlat=-35., urcrnrlon=-48.,urcrnrlat=-17., resolution='c')
my_map.drawmeridians(np.arange(-75.,-25.,5.), labels=[0,0,0,1], linewidth=0.5, color='black')
my_map.drawparallels(np.arange(-40.,5.,5.), labels=[1,0,0,0], linewidth=0.5, color='black') 
my_map.plot(lon_c_i, lat_c_i, 'o', color='blue', label='Cluster I', markersize=5)
my_map.plot(lon_c_ii, lat_c_ii, 'o', color='gray', label='Cluster II', markersize=5)
my_map.plot(lon_c_iii, lat_c_iii, 'o', color='green', label='Cluster III', markersize=5)
my_map.plot(lon_c_iv, lat_c_iv, 'o', color='red', label='Cluster IV', markersize=5)
my_map.plot(lon_c_v, lat_c_v, 'o', color='yellow', label='Cluster V', markersize=5)
plt.xlabel(u'Longitude', labelpad=20, fontweight='bold')
plt.ylabel(u'Latitude', labelpad=30, fontweight='bold')
plt.legend(loc=2, fontsize=10)

path = '/home/nice/Documentos/github_projects/shp'
my_map.readshapefile('{0}/lim_pais/lim_pais'.format(path), 'world', drawbounds=True, color='black', linewidth=0.5)

plt.title('Cluster analysis over SESA domain', fontsize=10, fontweight='bold')
plt.text(-74, -34, u'\u25B2 \nN', fontsize=10, fontweight='bold')

print('Path out to save figure')
# Path out to save figure
path_out = '/home/nice/Documentos/FPS_SESA/figs/sesa'
name_out = 'pyplt_stations_cluster_analysis_{0}_sesa.png'.format(type_cycle)
plt.savefig(os.path.join(path_out, name_out), dpi=300, bbox_inches='tight')
plt.close('all')
plt.cla()
exit()

